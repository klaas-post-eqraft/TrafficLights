//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)

//{{LSL_DEFINES
#define NUMBUT_WIDTH   60
#define NUMBUT_HEIGHT  50
#define NUMBUT_XOFF     6
#define NUMBUT_YOFF   100
#define NUMPAD_WIDTH  251
#define NUMPAD_HEIGHT 305
//}}LSL_DEFINES

//{{LSL_DECLARATION

(*!
<Class
	Name               = "KeyPadNum"
	Revision           = "0.6"
	GUID               = "{C0C4D728-AC36-45AF-8B33-32018E83C504}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "true"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	IconPath           = ".\Class\KeyPadNum\KeyPad.ico"
	SharedCommandTable = "true"
	Objectsize         = "(284,120)"
	Comment            = "class is used to get defaultimplementation of numeric keyboard.&#13;&#10;set client &quot;Ima&quot; to IMA_WINDOW&#13;&#10;set client &quot;No&quot; to _WIN_EDITOR_NUMERIC">
	<Channels>
		<Client Name="KeyPadImg" Required="true" Internal="true"/>
	</Channels>
	<RevDoku>
		<Owner Company="sigmatek" Author="kolott"/>
		<Dokumentation Revision="0.6" Date="2017-01-09" Author="kolott" Company="sigmatek" Description="betterment done in method S_Start()"/>
		<Dokumentation Revision="0.5" Date="2016-11-22" Author="kolott" Company="sigmatek" Description="KeyPad will fit into displayresolution of 320*240 as well"/>
		<Dokumentation Revision="0.4" Date="2016-07-14" Author="kolott" Company="sigmatek" Description="sa32402: virtual method ModifyTitleText() added"/>
		<Dokumentation Revision="0.3" Date="2015-11-06" Author="kolott" Company="sigmatek" Description="sa32226, color of titlebar will work at several frames"/>
		<Dokumentation Revision="0.2" Date="2014-02-07" Author="kolott" Company="sigmatek" Description="innovation titlelinepositioning"/>
		<Dokumentation Revision="0.1" Date="2013-10-02" Author="kolott" Company="sigmatek" Description="defines are done to enable access at derivation"/>
		<Dokumentation Revision="0.0" Date="2013-03-06" Author="kolott" Company="sigmatek" Description="release"/>
	</RevDoku>
	<Network Name="KeyPadNum">
		<!-- List of Components in this network -->
		<Components>
			<Object
				Name       = "_base"
				GUID       = "{BDEF1F3C-48D7-458D-8414-141CE86598D9}"
				Class      = "_Screen"
				Position   = "(218,120)"
				Visualized = "true">
				<Channels>
					<Server Name="Screen"/>
					<Client Name="ImA" Value="IMA_WINDOW"/>
					<Client Name="Lse"/>
					<Client Name="No" Value="_WIN_EDITOR_NUMERIC"/>
				</Channels>
			</Object>
			<Object
				Name       = "KeyPadImg"
				GUID       = "{AAD070FC-C7A5-45F2-B9AE-CAC1AC1099D2}"
				Class      = "KeyPadImages"
				Position   = "(210,390)"
				Visualized = "false">
				<Channels>
					<Server Name="ClassSvr"/>
				</Channels>
			</Object>
		</Components>
		<Comments>
		</Comments>
		<!-- List of Connections in this network -->
		<Connections>
			<Connection Source="this.Screen" Destination="_base.Screen" Vertices="(690,210),(518,210),"/>
			<Connection Source="_base.Lse" Destination="this.Lse" Vertices="(218,210),(38,210),"/>
			<Connection Source="_base.No" Destination="this.No" Vertices="(218,270),(38,270),"/>
			<Connection Source="_base.ImA" Destination="this.ImA" Vertices="(218,330),(38,330),"/>
			<Connection Source="this.KeyPadImg" Destination="KeyPadImg.ClassSvr"/>
		</Connections>
		<!-- Headerfiles -->
		<Options>
		</Options>
	</Network>
</Class>
*)
#pragma using _Screen

KeyPadNum : CLASS
: _Screen
  //Servers:
  //Clients:
	KeyPadImg 	: CltChCmd_KeyPadImages;
  //Variables:
		DoneByProgram 	: BOOL;
		NumPadWidth 	: INT;
		NumPadHeight 	: INT;
		NumButtHeight 	: INT;
		NumButtWidth 	: INT;
		NumButtYOff 	: INT;
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL S_Start
		VAR_INPUT
			pic 	: ^void;
			firsttime 	: BOOL;
		END_VAR;
				//! <Function Comment="method is used to create screen/window by program (without lse)" Name="S_CreateNew"/>
	FUNCTION VIRTUAL GLOBAL S_CreateNew
		VAR_INPUT
			psetup 	: ^_NEWSCREENPROP;
		END_VAR
		VAR_OUTPUT
			retcode 	: BOOL;
		END_VAR;
	
	FUNCTION TAB KeyTab_123;
				//! <Function Comment="method is used to customize titletext in numeric-editor" Name="ModifyTitleText"/>
	FUNCTION VIRTUAL ModifyTitleText
		VAR_INPUT
			pany 	: ^_ANYPARA;
			varno 	: UDINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma using KeyPadImages


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB KeyPadNum::@CT_
0$UINT,
2#0100000000000000$UINT, //TY_KEYPADNUM
0$UINT, 6$UINT, (SIZEOF(::KeyPadNum))$UINT, 
0$UINT, 1$UINT, 0$UINT, 
TO_UDINT(2771413771), "KeyPadNum", //Class
TO_UDINT(3599188277), "_Screen", 0$UINT, 3$UINT, //Baseclass
//Servers:
//Clients:
(::KeyPadNum.KeyPadImg.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(3266383049), "KeyPadImg", TO_UDINT(1581172638), "KeyPadImages", 0$UINT, 1$UINT, 
END_FUNCTION


#define USER_CNT_KeyPadNum 7

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_KeyPadNum] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION KeyPadNum::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
		nCmdSize	: UINT;
	END_VAR

	ret_code	:= _Screen::@STD();
	IF ret_code <> C_OK THEN
		RETURN;
	END_IF;
	nCmdSize		:= _Screen::Screen.pMeth^.nCmds$UINT*SIZEOF(pVoid) + CMDMETH.Init;

	_memcpy((#vmt.CmdTable)$^USINT, _Screen::Screen.pMeth, nCmdSize);
	vmt.CmdTable.nCmds		:= nSTDCMD + USER_CNT_KeyPadNum;
#pragma warning (disable : 74)
	vmt.UserFcts[3]		:= #S_Start();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[4]		:= #S_CreateNew();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[6]		:= #ModifyTitleText();

#pragma warning (default : 74)
	_Screen::Screen.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF _Screen::Screen.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION

#define xINVISIBLE INVISIBLE

FUNCTION TAB KeyPadNum::KeyTab_123

  '7',0,'8',0,'9',0,
  '4',0,'5',0,'6',0,
  '1',0,'2',0,'3',0,
  '.',0,'0',0,'-',0,

END_FUNCTION

FUNCTION VIRTUAL GLOBAL KeyPadNum::S_CreateNew
	VAR_INPUT
		psetup 	: ^_NEWSCREENPROP;
	END_VAR
	VAR_OUTPUT
		retcode 	: BOOL;
	END_VAR
  VAR
  	room : _ROOM;
    pdkp : ^_DEFKEYPAD;
  END_VAR

  retcode       := true;
  DoneByProgram := true;
  NumPadWidth   := NUMPAD_WIDTH;
  NumPadHeight  := NUMPAD_HEIGHT;
  NumButtWidth  := NUMBUT_WIDTH;
  NumButtHeight := NUMBUT_HEIGHT;
  NumButtYOff   := NUMBUT_YOFF;
  
  MyGetScreenSize(#room);
  
  if(room.xy2.x <= 320) then
    NumPadWidth   := 210;
    NumButtWidth  := 50;
  end_if;
  
  if(room.xy2.y <= 240) then
    NumPadHeight  := 238;
    NumButtHeight := 37;
    NumButtYOff   := 86;
  end_if;
  
  pdkp := Get_DEFKEYPAD();
  
  psetup^.Position.xy1.x     := (room.xy2.x - room.xy1.x + 1 - NumPadWidth) / 2;
  psetup^.Position.xy1.y     := (room.xy2.y - room.xy1.y + 1 - NumPadHeight) / 2;
  psetup^.Position.xy2.x     := psetup^.Position.xy1.x + NumPadWidth - 1;
  psetup^.Position.xy2.y     := psetup^.Position.xy1.y + NumPadHeight - 1;
  psetup^.FrameId            := pdkp^.WindowFrame;
  psetup^.TouchEditorAscii   := false;
  psetup^.TouchEditorNumeric := false;
  psetup^.ColorBack          := pdkp^.WindowColorBack;
  psetup^.ColorHatch         := pdkp^.TitleBarColor;  // sa32226

END_FUNCTION

#pragma warning (disable : 73)
FUNCTION VIRTUAL KeyPadNum::ModifyTitleText
	VAR_INPUT
		pany 	: ^_ANYPARA;
		varno 	: UDINT;
	END_VAR

END_FUNCTION
#pragma warning (default : 73)

FUNCTION VIRTUAL GLOBAL KeyPadNum::S_Start
	VAR_INPUT
		pic 	: ^void;
		firsttime 	: BOOL;
	END_VAR
  VAR
  	style : _STYLESHEET;
    room : _ROOM;
    x, y : int;
    ptab : ^usint;
    any : _ANYPARA;
    pdkp : ^_DEFKEYPAD;
  END_VAR

  if((DoneByProgram = true) & (firsttime = true)) then
  
    pdkp := Get_DEFKEYPAD();
  
    init_STYLESHEET(#style);
    setup_STYLESHEET(#style, #pdkp^.StandardFontSchemeName[0], pdkp^.ButtonFrame, T_CENTERBOUND or T_MIDBOUND, pdkp^.ButtonColorReleased, pdkp^.ButtonColorText, pdkp^.ButtonColorPressed, WHITE, DARKGRAY, NIL, NIL, NIL, NIL, NIL);
    
    ptab := #KeyTab_123()$^usint + 4;
    
    for y:=0 to 3 do
      for x:=0 to 2 do
        room.xy1.x := NUMBUT_XOFF + x * NumButtWidth;
        room.xy1.y := NumButtYOff + y * NumButtHeight;
        room.xy2.x := room.xy1.x + NumButtWidth - 2;
        room.xy2.y := room.xy1.y + NumButtHeight - 2;
        add_key(pic$^_MY_PICTURE, #style, #room, DEFSCOPE, ptab, sizeof(_ASCII), T_CENTERBOUND or T_MIDBOUND, ptab^, ptab^);
        ptab += 2;
      end_for;
    end_for;

    // key backspace
    room.xy1.x := NUMBUT_XOFF + 3 * NumButtWidth;
    room.xy1.y := NumButtYOff;
    room.xy2.x := room.xy1.x + NumButtWidth - 2;
    room.xy2.y := room.xy1.y + NumButtHeight - 2;
    add_key(pic$^_MY_PICTURE, #style, #room, KeyPadImg.GetImage(0), NIL, sizeof(_ASCII), T_CENTERBOUND or T_MIDBOUND, _BCKSPC, _BCKSPC);

    // key inc
    room.xy1.y += NumButtHeight;
    room.xy2.y += NumButtHeight;
    add_key(pic$^_MY_PICTURE, #style, #room, KeyPadImg.GetImage(4), NIL, sizeof(_ASCII), T_CENTERBOUND or T_MIDBOUND, _PGUP, _PGUP);
  
    // key dec
    room.xy1.y += NumButtHeight;
    room.xy2.y += NumButtHeight;
    add_key(pic$^_MY_PICTURE, #style, #room, KeyPadImg.GetImage(5), NIL, sizeof(_ASCII), T_CENTERBOUND or T_MIDBOUND, _PGDOWN, _PGDOWN);

    // key enter
    room.xy1.y += NumButtHeight;
    room.xy2.y += NumButtHeight;
    add_key(pic$^_MY_PICTURE, #style, #room, KeyPadImg.GetImage(1), NIL, sizeof(_ASCII), T_CENTERBOUND or T_MIDBOUND, _ENTER, _ENTER);
  
    // input
    setup_STYLESHEET(#style, #pdkp^.StandardFontSchemeName[0], FRAME_STEALTH, T_CENTERBOUND or T_MIDBOUND or T_INVERTTHEME, LIGHTGRAY, WHITE, LIGHTGRAY, WHITE, DARKGRAY, NIL, NIL, NIL, NIL, NIL);
    room.xy1.x := NUMBUT_XOFF;
    room.xy1.y := NumButtYOff - (64 - NUMBUT_YOFF + NumButtYOff); //NumButtYOff2; //52;
    room.xy2.x := room.xy1.x + (3 * NumButtWidth) - 2;
    room.xy2.y := room.xy1.y + NumButtHeight - 6;
    room.xy1.y += KeyPadImg.GetTitleLineHeight(pdkp^.WindowFrame) - KeyPadImg.GetTitleLineHeight(FRAME_NONE);
    
    add_input(pic$^_MY_PICTURE, #style, #room, DEFSCOPE, VARNO_EDITORDUMMY, AS_NUMERIC, DEFSCOPE);
    
    if(pdkp^.TitleColorText$UINT <> INVISIBLE) then
      // unittext
      setup_STYLESHEET(#style, #pdkp^.StandardFontSchemeName[0], FRAME_NONE, T_LEFTBOUND or T_MIDBOUND, xINVISIBLE, pdkp^.TitleColorText, INVISIBLE, INVISIBLE, INVISIBLE, NIL, NIL, NIL, NIL, NIL);
      room.xy1.x := room.xy2.x + 2;
      room.xy2.x := NumPadWidth - 6; //room.xy1.x + NumButtWidth - 1;
      init_ANYPARA(#any);
      any.anything.list := VARUNIT;
      any.anything.no   := VARNO_EDITORDUMMY;
      add_text(pic$^_MY_PICTURE, #style, #room, DEFSCOPE, #any, NIL, sizeof(_ASCII), DEFSCOPE);

      // titletext
      room.xy1.x := 3;
      room.xy1.y := 2;
      room.xy2.x := NumPadWidth - 34;
      room.xy2.y := 2 + KeyPadImg.GetTitleLineHeight(pdkp^.WindowFrame);
      free_ANYPARA(#any);
      any.anything.list := VARTXT1;
      any.anything.no   := VARNO_EDITORDUMMY;
      
      ModifyTitleText(#any, VarList_GetServerToEdit()); // sa32402
      
      add_text(pic$^_MY_PICTURE, #style, #room, DEFSCOPE, #any, NIL, sizeof(_ASCII), DEFSCOPE);
      free_ANYPARA(#any);
    end_if;
    
    if(pdkp^.LimitColorText$UINT <> INVISIBLE) then
      // lolimit
      setup_STYLESHEET(#style, #pdkp^.SmallFontSchemeName[0], FRAME_NONE, T_LEFTBOUND or T_MIDBOUND, xINVISIBLE, pdkp^.LimitColorText, INVISIBLE, INVISIBLE, INVISIBLE, NIL, NIL, NIL, NIL, NIL);
      room.xy1.x := NUMBUT_XOFF;
      room.xy2.x := NUMBUT_XOFF + ((3 * NumButtWidth)/ 2) - 1;
      room.xy1.y := NumButtYOff - 18;
      room.xy2.y := room.xy1.y + 14;    
      init_ANYPARA(#any);
      any.anything.list := VARLIMIT_LO;
      any.anything.no   := VARNO_EDITORDUMMY;
      add_text(pic$^_MY_PICTURE, #style, #room, DEFSCOPE, #any, NIL, sizeof(_ASCII), DEFSCOPE);

      // hilimit
      setup_STYLESHEET(#style, #pdkp^.SmallFontSchemeName[0], FRAME_NONE, T_RIGHTBOUND or T_MIDBOUND, xINVISIBLE, pdkp^.LimitColorText, INVISIBLE, INVISIBLE, INVISIBLE, NIL, NIL, NIL, NIL, NIL);
      room.xy1.x := room.xy2.x + 1;
      room.xy2.x := NUMBUT_XOFF + (3 * NumButtWidth) - 2;
      free_ANYPARA(#any);
      any.anything.list := VARLIMIT_HI;
      any.anything.no   := VARNO_EDITORDUMMY;
      add_text(pic$^_MY_PICTURE, #style, #room, DEFSCOPE, #any, NIL, sizeof(_ASCII), DEFSCOPE);
      free_ANYPARA(#any);
    end_if;
   
    if(has_theme_cancel(pdkp^.WindowFrame) = false) then
      // cancel button
      setup_STYLESHEET(#style, #pdkp^.StandardFontSchemeName[0], pdkp^.ButtonFrame, T_CENTERBOUND or T_MIDBOUND, 16#F800, pdkp^.ButtonColorText, RED, WHITE, DARKGRAY, NIL, NIL, NIL, NIL, NIL);
      room.xy1.x := NUMBUT_XOFF + (NumButtWidth * 4) - 27;
      room.xy1.y := 5;
      room.xy2.x := room.xy1.x + 26;
      room.xy2.y := 31;
      add_key(pic$^_MY_PICTURE, #style, #room, KeyPadImg.GetImage(6), NIL, sizeof(_ASCII), T_CENTERBOUND or T_MIDBOUND, _ESC, _ESC);
    end_if;
     
    free_STYLESHEET(#style);
  end_if;
  
END_FUNCTION
