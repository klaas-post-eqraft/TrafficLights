//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "_AlarmX1Para"
	Revision           = "0.2"
	GUID               = "{5C73106D-5FE4-43AB-AB3C-D51826B1E7A5}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "true"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(284,120)"
	Comment            = "Implements an alarm representation that can record a single numeric parameter at alarm active event.">
	<Channels>
		<Server
			Name           = "ClassSvr"
			Initialize     = "false"
			Visualized     = "true"
			WriteProtected = "false">
		</Server>
		<Client Name="Para1" Required="false" Internal="false" Comment="First numeric parameter of the alarm.&#13;&#10;Can either be used as constant value or by connection to a parameter server that will be read at alarm active event."/>
	</Channels>
	<Network Name="_AlarmX1Para">
		<!-- List of Components in this network -->
		<Components>
			<Object
				Name       = "_base"
				GUID       = "{59010D14-43B0-4579-A45C-5A4B8DD3E275}"
				Class      = "_AlarmX0Para"
				Position   = "(270,150)"
				Visualized = "true">
				<Channels>
					<Server Name="ClassSvr"/>
					<Client Name="Acknow"/>
					<Client Name="Config"/>
					<Client Name="Group"/>
				</Channels>
			</Object>
		</Components>
		<Comments>
		</Comments>
		<!-- List of Connections in this network -->
		<Connections>
			<Connection Source="this.ClassSvr" Destination="_base.ClassSvr" Vertices="(786,210),(614,240),"/>
			<Connection Source="_base.Config" Destination="this.Config" Vertices="(270,240),(38,210),"/>
			<Connection Source="_base.Acknow" Destination="this.Acknow" Vertices="(270,300),(38,270),"/>
			<Connection Source="_base.Group" Destination="this.Group" Vertices="(270,360),(38,330),"/>
		</Connections>
		<!-- Headerfiles -->
		<Options>
		</Options>
	</Network>
</Class>
*)
#pragma using _AlarmX0Para

_AlarmX1Para : CLASS
: _AlarmX0Para
  //Servers:
  //Clients:
	Para1 	: CltCh_DINT;
  //Variables:
  //Functions:
				//! <Function Comment="Returns the amount of numeric alarm parameters, provided by the given implementation and fills the ppara array with the Lasal IDs of the connected parameter servers. &#13;&#10;Override this method in your own subclass to provide custom handling of numeric alarm parameters." Name="GetParaID"/>
	FUNCTION VIRTUAL GLOBAL GetParaID
		VAR_INPUT
			ppara 	: ^UDINT;			//! <Variable Comment="Pointer to an UDINT array, that is to be filled with the Lasal IDs of the connected numeric parameter servers of the given alarm implementation. &#13;&#10;This is usually done by inserting the pCH data field of the parameter client at the corresponding array location. &#13;&#10;If the numeric value is a constant value, the array location is to be filled with 0." Name="GetParaID.ppara"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: UDINT;			//! <Variable Comment="Returns the number of numeric parameters provided by the given alarm implementation." Name="GetParaID.retcode"/>
		END_VAR;
				//! <Function Comment="This method reads the actual values of the parameter clients and fills them into the array of DINT parameter values given by ppara. &#13;&#10;Override this method in your own subclass to provide custom handling of numeric alarm parameters." Name="GetParaVal"/>
	FUNCTION VIRTUAL GLOBAL GetParaVal
		VAR_INPUT
			ppara 	: ^DINT;			//! <Variable Comment="Pointer to a DINT array with the size specified by the return value of GetParaID(). &#13;&#10;The array is to be filled with the current numeric parameter values, usually by calling the Read() method of the corresponding parameter client." Name="GetParaVal.ppara"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: UDINT;			//! <Variable Comment="Returns the number of numeric parameters provided by the given alarm implementation." Name="GetParaVal.retcode"/>
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

//}}LSL_DECLARATION


FUNCTION GLOBAL TAB _AlarmX1Para::@CT_
0$UINT,
2#0100000000000000$UINT, //TY__ALARMX1PARA
0$UINT, 2$UINT, (SIZEOF(::_AlarmX1Para))$UINT, 
0$UINT, 1$UINT, 0$UINT, 
TO_UDINT(315844732), "_AlarmX1Para", //Class
TO_UDINT(800276940), "_AlarmX0Para", 0$UINT, 20$UINT, //Baseclass
//Servers:
//Clients:
(::_AlarmX1Para.Para1.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(169706286), "Para1", 
END_FUNCTION


#define USER_CNT__AlarmX1Para 9

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT__AlarmX1Para] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION _AlarmX1Para::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
		nCmdSize	: UINT;
	END_VAR

	ret_code	:= _AlarmX0Para::@STD();
	IF ret_code <> C_OK THEN
		RETURN;
	END_IF;
	nCmdSize		:= _AlarmX0Para::ClassSvr.pMeth^.nCmds$UINT*SIZEOF(pVoid) + CMDMETH.Init;

	_memcpy((#vmt.CmdTable)$^USINT, _AlarmX0Para::ClassSvr.pMeth, nCmdSize);
	vmt.CmdTable.nCmds		:= nSTDCMD + USER_CNT__AlarmX1Para;
#pragma warning (disable : 74)
	vmt.UserFcts[0]		:= #GetParaID();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[1]		:= #GetParaVal();

#pragma warning (default : 74)
	_AlarmX0Para::ClassSvr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF _AlarmX0Para::ClassSvr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION


//*********************Inserted from .\_AlarmX1Para\_AlarmX1Para_00_00.st*********************



 



FUNCTION VIRTUAL GLOBAL _AlarmX1Para::GetParaID
  VAR_INPUT
    ppara		: ^UDINT;
  END_VAR
  VAR_OUTPUT
    retcode		: UDINT;
  END_VAR

  retcode := 1;

  if(IsClientConnected(#Para1) = TRUE) then
    ppara^ := (Para1.pCH)$UDINT;
  else
    ppara^ := 0;
  end_if;

END_FUNCTION 
FUNCTION VIRTUAL GLOBAL _AlarmX1Para::GetParaVal
  VAR_INPUT
    ppara		: ^DINT;
  END_VAR
  VAR_OUTPUT
    retcode		: UDINT;
  END_VAR

  ppara^  := Para1.Read();
  retcode := 1;

END_FUNCTION
