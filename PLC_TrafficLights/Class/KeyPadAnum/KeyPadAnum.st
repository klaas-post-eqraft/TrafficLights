//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "KeyPadAnum"
	Revision           = "0.10"
	GUID               = "{0E50DFFC-3323-41FE-BC04-4C6AE95F467D}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "true"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	IconPath           = ".\Class\KeyPadAnum\KeyPad.ico"
	SharedCommandTable = "true"
	Objectsize         = "(284,120)"
	Comment            = "class is used to get defaultimplementation of QWERTZ, QWERTY, AZERTY keyboard.&#13;&#10;keyboard differs on different languages&#13;&#10;set client &quot;Ima&quot; to IMA_WINDOW&#13;&#10;set client &quot;No&quot; to _WIN_EDITOR_ANUMERIC">
	<Channels>
		<Client Name="AltGr" Required="false" Internal="false" DefValue="1" Comment="set client to 1 when use of AltGr-key is necessary&#13;&#10;on the other hand client has to be set to 0"/>
		<Client Name="CapitalLetter" Required="false" Internal="false" DefValue="0" Comment="set client to 1 if capital letters are used without activated shift mode&#13;&#10;on the other hand set 0 to get capital letters when shift mode is activated"/>
		<Client Name="KeyPadImg" Required="true" Internal="true"/>
	</Channels>
	<RevDoku>
		<Owner Company="sigmatek" Author="kolott"/>
		<Dokumentation Revision="0.10" Date="2019-05-14" Author="kolott" Company="sigmatek" Description="Japanese Keypad added"/>
		<Dokumentation Revision="0.9" Date="2017-01-09" Author="kolott" Company="sigmatek" Description="betterment done in method S_Start()"/>
		<Dokumentation Revision="0.8" Date="2016-11-22" Author="kolott" Company="sigmatek" Description="KeyPad will fit into displayresolution of 320*240 as well"/>
		<Dokumentation Revision="0.7" Date="2016-07-14" Author="kolott" Company="sigmatek" Description="sa32402: virtual method ModifyTitleText() added"/>
		<Dokumentation Revision="0.6" Date="2015-11-06" Author="kolott" Company="sigmatek" Description="sa32226, color of titlebar will work at several frames"/>
		<Dokumentation Revision="0.5" Date="2015-08-21" Author="kolott" Company="sigmatek" Description="betterment when using different frames"/>
		<Dokumentation Revision="0.4" Date="2014-02-07" Author="kolott" Company="sigmatek" Description="innovation titlelinepositioning"/>
		<Dokumentation Revision="0.3" Date="2013-10-02" Author="kolott" Company="sigmatek" Description="russian, ukrainian and greek keypad added"/>
		<Dokumentation Revision="0.1" Date="2013-07-10" Author="kolott" Company="sigmatek" Description="AltGr and CapitalLetter clients added"/>
		<Dokumentation Revision="0.0" Date="2013-03-06" Author="kolott" Company="sigmatek" Description="release"/>
	</RevDoku>
	<Network Name="KeyPadAnum">
		<!-- List of Components in this network -->
		<Components>
			<Object
				Name       = "_base"
				GUID       = "{A426951D-7399-48D4-BA08-F18542496EED}"
				Class      = "_Screen"
				Position   = "(218,120)"
				Visualized = "true">
				<Channels>
					<Server Name="Screen"/>
					<Client Name="ImA" Value="IMA_WINDOW"/>
					<Client Name="Lse"/>
					<Client Name="No" Value="_WIN_EDITOR_ANUMERIC"/>
				</Channels>
			</Object>
			<Object
				Name       = "KeyPadImg"
				GUID       = "{948A1B45-184E-460A-AA35-88A8B97A3BB9}"
				Class      = "KeyPadImages"
				Position   = "(210,420)"
				Visualized = "false">
				<Channels>
					<Server Name="ClassSvr"/>
				</Channels>
			</Object>
		</Components>
		<Comments>
		</Comments>
		<!-- List of Connections in this network -->
		<Connections>
			<Connection Source="this.Screen" Destination="_base.Screen" Vertices="(690,210),(518,210),"/>
			<Connection Source="_base.Lse" Destination="this.Lse" Vertices="(218,210),(38,210),"/>
			<Connection Source="_base.No" Destination="this.No" Vertices="(218,270),(38,270),"/>
			<Connection Source="_base.ImA" Destination="this.ImA" Vertices="(218,330),(38,330),"/>
			<Connection Source="this.KeyPadImg" Destination="KeyPadImg.ClassSvr"/>
		</Connections>
		<!-- Headerfiles -->
		<Options>
		</Options>
	</Network>
</Class>
*)
#pragma using _Screen

KeyPadAnum : CLASS
: _Screen
  //Servers:
  //Clients:
	KeyPadImg 	: CltChCmd_KeyPadImages;
	AltGr 	: CltCh_DINT;
	CapitalLetter 	: CltCh_DINT;
  //Variables:
		KeyButton_XOff 	: INT;
		KeyButton_YOff 	: INT;
		KeyButton_Width 	: INT;
		KeyButton_Height 	: INT;
		DoneByProgram 	: BOOL;
		YOff 	: INT;
  //Functions:
	
	FUNCTION KeyPadAnum
		VAR_OUTPUT
			ret_code 	: ConfStates;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL S_Start
		VAR_INPUT
			pic 	: ^void;
			firsttime 	: BOOL;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL S_CreateNew
		VAR_INPUT
			psetup 	: ^_NEWSCREENPROP;
		END_VAR
		VAR_OUTPUT
			retcode 	: BOOL;
		END_VAR;
	
	FUNCTION TAB KeyTab_QUERTZ;
	
	FUNCTION TAB KeyTab_QUERTY;
	
	FUNCTION VIRTUAL SelectKeyboard
		VAR_OUTPUT
			retcode 	: ^USINT;
		END_VAR;
	
	FUNCTION TAB KeyTab_FRENCH;
	
	FUNCTION TAB KeyTab_ITALIAN;
	
	FUNCTION TAB KeyTab_SPAIN;
	
	FUNCTION TAB KeyTab_PORTUGUESE;
	
	FUNCTION TAB KeyTab_NORWEGIAN;
	
	FUNCTION TAB KeyTab_SWEDISH;
	
	FUNCTION TAB SingleText;
	
	FUNCTION VIRTUAL GetBig
		VAR_INPUT
			pkey 	: ^USINT;
		END_VAR
		VAR_OUTPUT
			retcode 	: USINT;
		END_VAR;
	
	FUNCTION TAB KeyTab_CROATIAN_SERBIAN;
	
	FUNCTION TAB KeyTab_DANISH;
	
	FUNCTION TAB KeyTab_DUTCH;
	
	FUNCTION TAB KeyTab_RUSSIAN;
	
	FUNCTION IsUnicodeKeyboard
		VAR_INPUT
			pkey 	: ^USINT;
		END_VAR
		VAR_OUTPUT
			retcode 	: BOOL;
		END_VAR;
	
	FUNCTION TAB KeyTab_UKRAINIAN;
	
	FUNCTION TAB KeyTab_GREEK;
				//! <Function Comment="method is used to customize titletext in anum-editor" Name="ModifyTitleText"/>
	FUNCTION VIRTUAL ModifyTitleText
		VAR_INPUT
			pany 	: ^_ANYPARA;
			varno 	: UDINT;
		END_VAR;
	
	FUNCTION TAB KeyTab_JAPANESE;
	
	FUNCTION VIRTUAL S_Start_Japanese
		VAR_INPUT
			pic 	: ^void;
			pstyle 	: ^_STYLESHEET;
			pdkp 	: ^_DEFKEYPAD;
		END_VAR;
	
	FUNCTION TAB KeyTab_JAPANESE_Text;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma using KeyPadImages


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB KeyPadAnum::@CT_
0$UINT,
2#0100000000000000$UINT, //TY_KEYPADANUM
0$UINT, 10$UINT, (SIZEOF(::KeyPadAnum))$UINT, 
0$UINT, 3$UINT, 0$UINT, 
TO_UDINT(2266234845), "KeyPadAnum", //Class
TO_UDINT(3599188277), "_Screen", 0$UINT, 3$UINT, //Baseclass
//Servers:
//Clients:
(::KeyPadAnum.KeyPadImg.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(3266383049), "KeyPadImg", TO_UDINT(1581172638), "KeyPadImages", 0$UINT, 1$UINT, 
(::KeyPadAnum.AltGr.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(597364247), "AltGr", 
(::KeyPadAnum.CapitalLetter.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(956232733), "CapitalLetter", 
END_FUNCTION


#define USER_CNT_KeyPadAnum 10

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_KeyPadAnum] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION KeyPadAnum::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
		nCmdSize	: UINT;
	END_VAR

	ret_code	:= _Screen::@STD();
	IF ret_code <> C_OK THEN
		RETURN;
	END_IF;
	nCmdSize		:= _Screen::Screen.pMeth^.nCmds$UINT*SIZEOF(pVoid) + CMDMETH.Init;

	_memcpy((#vmt.CmdTable)$^USINT, _Screen::Screen.pMeth, nCmdSize);
	vmt.CmdTable.nCmds		:= nSTDCMD + USER_CNT_KeyPadAnum;
#pragma warning (disable : 74)
	vmt.UserFcts[3]		:= #S_Start();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[4]		:= #S_CreateNew();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[6]		:= #SelectKeyboard();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[7]		:= #GetBig();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[8]		:= #ModifyTitleText();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[9]		:= #S_Start_Japanese();

#pragma warning (default : 74)
	_Screen::Screen.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF _Screen::Screen.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	ret_code	:= KeyPadAnum();

END_FUNCTION

//{{LSL_IMPLEMENTATION

FUNCTION TAB KeyPadAnum::SingleText

   0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , //   0- 31
   0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , //  32- 63
   0 ,'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z', 0 , 0 , 0 , 0 , 0 , //  64- 95
   0 ,'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z', 0 , 0 , 0 , 0 , 0 , //  96-127
   0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , // 128-159 
   0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , // 160-191
   0 , 0 , 0 , 0 ,196,197,198,199, 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,209, 0 , 0 , 0 , 0 ,214, 0 ,216, 0 , 0 , 0 ,220, 0 , 0 , 0 , // 192-223
   0 , 0 , 0 , 0 ,196,197,198,199, 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ,209, 0 , 0 , 0 , 0 ,214, 0 ,216, 0 , 0 , 0 ,220, 0 , 0 , 0 , // 224-255
   
END_FUNCTION

FUNCTION TAB KeyPadAnum::KeyTab_QUERTZ

  '1','!', 0 ,'2','"', 0 ,'3','§', 0 ,'4','$', 0 ,'5','%', 0 ,'6','&', 0 ,'7','/','{','8','(','[','9',')',']','0','=','}','ß','?','\',
  'q','Q','@','w','W', 0 ,'e','E', 0 ,'r','R', 0 ,'t','T', 0 ,'z','Z', 0 ,'u','U', 0 ,'i','I', 0 ,'o','O', 0 ,'p','P', 0 ,'ü','Ü', 0 ,
  'a','A', 0 ,'s','S', 0 ,'d','D', 0 ,'f','F', 0 ,'g','G', 0 ,'h','H', 0 ,'j','J', 0 ,'k','K', 0 ,'l','L', 0 ,'ö','Ö', 0 ,'ä','Ä', 0 ,
  'y','Y', 0 ,'x','X', 0 ,'c','C', 0 ,'v','V', 0 ,'b','B', 0 ,'n','N', 0 ,'m','M', 0 ,',',';', 0 ,'.',':', 0 ,'-','_', 0 ,'+','*', 0 ,
  
END_FUNCTION

FUNCTION TAB KeyPadAnum::KeyTab_QUERTY

  '1','!', 0 ,'2','@', 0 ,'3','#', 0 ,'4','$', 0 ,'5','%', 0 ,'6','^', 0 ,'7','&', 0 ,'8','*', 0 ,'9','(', 0 ,'0',')', 0 ,'=','+', 0 ,
  'q','Q', 0 ,'w','W', 0 ,'e','E', 0 ,'r','R', 0 ,'t','T', 0 ,'y','Y', 0 ,'u','U', 0 ,'i','I', 0 ,'o','O', 0 ,'p','P', 0 ,'[','{', 0 ,
  'a','A', 0 ,'s','S', 0 ,'d','D', 0 ,'f','F', 0 ,'g','G', 0 ,'h','H', 0 ,'j','J', 0 ,'k','K', 0 ,'l','L', 0 ,';',':', 0 ,']','}', 0 ,
  'z','Z', 0 ,'x','X', 0 ,'c','C', 0 ,'v','V', 0 ,'b','B', 0 ,'n','N', 0 ,'m','M', 0 ,',','<', 0 ,'.','>', 0 ,'/','?','\','-','_', 0 ,

END_FUNCTION

FUNCTION TAB KeyPadAnum::KeyTab_DUTCH

  '1','!','@','2','"', 0 ,'3','#', 0 ,'4','$', 0 ,'5','%', 0 ,'6','&', 0 ,'7','_', 0 ,'8','(','{','9',')','}','0',''', 0 ,'/','?','\',
  'q','Q', 0 ,'w','W', 0 ,'e','E', 0 ,'r','R', 0 ,'t','T', 0 ,'y','Y', 0 ,'u','U', 0 ,'i','I', 0 ,'o','O', 0 ,'p','P', 0 ,'*','°', 0 ,
  'a','A', 0 ,'s','S','ß','d','D', 0 ,'f','F', 0 ,'g','G', 0 ,'h','H', 0 ,'j','J', 0 ,'k','K', 0 ,'l','L', 0 ,'+',177, 0 ,'<','>', 0 ,
  'z','Z', 0 ,'x','X', 0 ,'c','C', 0 ,'v','V', 0 ,'b','B', 0 ,'n','N', 0 ,'m','M', 0 ,',',';', 0 ,'.',':', 0 ,'-','=', 0 ,'[',']', 0 ,

END_FUNCTION

FUNCTION TAB KeyPadAnum::KeyTab_FRENCH

  '&','1', 0 ,233,'2','~','"','3','#',''','4','{','(','5','[','-','6', 0 ,232,'7', 0 ,'_','8','\',231,'9','^',224,'0','@',')','°',']',
  'a','A', 0 ,'z','Z', 0 ,'e','E', 0 ,'r','R', 0 ,'t','T', 0 ,'y','Y', 0 ,'u','U', 0 ,'i','I', 0 ,'o','O', 0 ,'p','P', 0 ,'=','+','}',
  'q','Q', 0 ,'s','S', 0 ,'d','D', 0 ,'f','F', 0 ,'g','G', 0 ,'h','H', 0 ,'j','J', 0 ,'k','K', 0 ,'l','L', 0 ,'m','M', 0 ,249,'%', 0 ,
  'w','W', 0 ,'x','X', 0 ,'c','C', 0 ,'v','V', 0 ,'b','B', 0 ,'n','N', 0 ,',','?', 0 ,';','.', 0 ,':','/', 0 ,'!','§', 0 ,'<','>', 0 ,

END_FUNCTION

FUNCTION TAB KeyPadAnum::KeyTab_ITALIAN

  '1','!', 0 ,'2','"', 0 ,'3',163, 0 ,'4','$', 0 ,'5','%', 0 ,'6','&', 0 ,'7','/','{','8','(','[','9',')',']','0','=','}','+','*', 0 ,
  'q','Q', 0 ,'w','W', 0 ,'e','E', 0 ,'r','R', 0 ,'t','T', 0 ,'y','Y', 0 ,'u','U', 0 ,'i','I', 0 ,'o','O', 0 ,'p','P', 0 ,232,233, 0 ,
  'a','A', 0 ,'s','S', 0 ,'d','D', 0 ,'f','F', 0 ,'g','G', 0 ,'h','H', 0 ,'j','J', 0 ,'k','K', 0 ,'l','L', 0 ,242,231,'@',224,'°','#',
  'z','Z', 0 ,'x','X', 0 ,'c','C', 0 ,'v','V', 0 ,'b','B', 0 ,'n','N', 0 ,'m','M', 0 ,',',';', 0 ,'.',':', 0 ,'-','_', 0 ,'<','>', 0 ,

END_FUNCTION

FUNCTION TAB KeyPadAnum::KeyTab_SPAIN

  '1','!','\','2','"','@','3','.','#','4','$','~','5','%', 0 ,'6','&', 0 ,'7','/','{','8','(','[','9',')',']','0','=','}',''','?', 0 ,
  'q','Q', 0 ,'w','W', 0 ,'e','E', 0 ,'r','R', 0 ,'t','T', 0 ,'y','Y', 0 ,'u','U', 0 ,'i','I', 0 ,'o','O', 0 ,'p','P', 0 ,'+','*', 0 ,
  'a','A', 0 ,'s','S', 0 ,'d','D', 0 ,'f','F', 0 ,'g','G', 0 ,'h','H', 0 ,'j','J', 0 ,'k','K', 0 ,'l','L', 0 ,241,209, 0 ,231,199, 0 ,
  'z','Z', 0 ,'x','X', 0 ,'c','C', 0 ,'v','V', 0 ,'b','B', 0 ,'n','N', 0 ,'m','M', 0 ,',',';', 0 ,'.',':', 0 ,'-','_', 0 ,'<','>', 0 ,

END_FUNCTION

FUNCTION TAB KeyPadAnum::KeyTab_PORTUGUESE

  '1','!', 0 ,'2','@', 0 ,'3','#', 0 ,'4','$', 0 ,'5','%', 0 ,'6','"', 0 ,'7','&', 0 ,'8','*', 0 ,'9','(','{','0',')','}','-','_', 0 ,
  'q','Q','/','w','W', 0 ,'e','E', 0 ,'r','R', 0 ,'t','T', 0 ,'y','Y', 0 ,'u','U', 0 ,'i','I', 0 ,'o','O', 0 ,'p','P', 0 ,'+','=','§',
  'a','A', 0 ,'s','S', 0 ,'d','D', 0 ,'f','F', 0 ,'g','G', 0 ,'h','H', 0 ,'j','J', 0 ,'k','K', 0 ,'l','L', 0 ,231,199, 0 ,'[',']','~',
  'z','Z', 0 ,'x','X', 0 ,'c','C', 0 ,'v','V', 0 ,'b','B', 0 ,'n','N', 0 ,'m','M', 0 ,',','<', 0 ,'.','>', 0 ,';',':', 0 ,'/','?', 0 ,

END_FUNCTION

FUNCTION TAB KeyPadAnum::KeyTab_NORWEGIAN

  '1','!', 0 ,'2','"','@','3','#', 0 ,'4',164,'$','5','%', 0 ,'6','&', 0 ,'7','/','{','8','(','[','9',')',']','0','=','}','+','?', 0 ,
  'q','Q', 0 ,'w','W', 0 ,'e','E', 0 ,'r','R', 0 ,'t','T', 0 ,'y','Y', 0 ,'u','U', 0 ,'i','I', 0 ,'o','O', 0 ,'p','P', 0 ,229,197, 0 ,
  'a','A', 0 ,'s','S', 0 ,'d','D', 0 ,'f','F', 0 ,'g','G', 0 ,'h','H', 0 ,'j','J', 0 ,'k','K', 0 ,'l','L', 0 ,248,216, 0 ,230,198, 0 ,
  'z','Z', 0 ,'x','X', 0 ,'c','C', 0 ,'v','V', 0 ,'b','B', 0 ,'n','N', 0 ,'m','M', 0 ,',',';', 0 ,'.',':', 0 ,'-','_', 0 ,'\','*', 0 ,
  
END_FUNCTION

FUNCTION TAB KeyPadAnum::KeyTab_DANISH

  '1','!', 0 ,'2','"','@','3','#', 0 ,'4',164,'$','5','%', 0 ,'6','&', 0 ,'7','/','{','8','(','[','9',')',']','0','=','}','+','?', 0 ,
  'q','Q', 0 ,'w','W', 0 ,'e','E', 0 ,'r','R', 0 ,'t','T', 0 ,'y','Y', 0 ,'u','U', 0 ,'i','I', 0 ,'o','O', 0 ,'p','P', 0 ,229,197, 0 ,
  'a','A', 0 ,'s','S', 0 ,'d','D', 0 ,'f','F', 0 ,'g','G', 0 ,'h','H', 0 ,'j','J', 0 ,'k','K', 0 ,'l','L', 0 ,230,198, 0 ,248,216, 0 ,
  'z','Z', 0 ,'x','X', 0 ,'c','C', 0 ,'v','V', 0 ,'b','B', 0 ,'n','N', 0 ,'m','M', 0 ,',',';', 0 ,'.',':', 0 ,'-','_', 0 ,'\','*', 0 ,
  
END_FUNCTION

FUNCTION TAB KeyPadAnum::KeyTab_SWEDISH

  '1','!', 0 ,'2','"','@','3','#', 0 ,'4',164,'$','5','%', 0 ,'6','&', 0 ,'7','/','{','8','(','[','9',')',']','0','=','}','+','?','\',
  'q','Q', 0 ,'w','W', 0 ,'e','E', 0 ,'r','R', 0 ,'t','T', 0 ,'y','Y', 0 ,'u','U', 0 ,'i','I', 0 ,'o','O', 0 ,'p','P', 0 ,229,197, 0 ,
  'a','A', 0 ,'s','S', 0 ,'d','D', 0 ,'f','F', 0 ,'g','G', 0 ,'h','H', 0 ,'j','J', 0 ,'k','K', 0 ,'l','L', 0 ,'ö','Ö', 0 ,'ä','Ä', 0 ,
  'z','Z', 0 ,'x','X', 0 ,'c','C', 0 ,'v','V', 0 ,'b','B', 0 ,'n','N', 0 ,'m','M', 0 ,',',';', 0 ,'.',':', 0 ,'-','_', 0 ,'~','*', 0 ,
  
END_FUNCTION

FUNCTION TAB KeyPadAnum::KeyTab_RUSSIAN

    49$uint,  33$uint,  0$uint,    50$uint,  34$uint,  0$uint,    51$uint,  21$uint,  0$uint,    52$uint,  59$uint,  0$uint,    53$uint,  37$uint,  0$uint,   
    54$uint,  58$uint,  0$uint,    55$uint,  63$uint,  0$uint,    56$uint,  42$uint,  0$uint,    57$uint,  40$uint,  0$uint,    48$uint,  41$uint,  0$uint,    45$uint,  95$uint,0$uint,
  1081$uint,1049$uint,'Q'$uint,  1094$uint,1062$uint,'W'$uint,  1091$uint,1059$uint,'E'$uint,  1082$uint,1050$uint,'R'$uint,  1077$uint,1045$uint,'T'$uint,   
  1085$uint,1053$uint,'Y'$uint,  1075$uint,1043$uint,'U'$uint,  1096$uint,1064$uint,'I'$uint,  1097$uint,1065$uint,'O'$uint,  1079$uint,1047$uint,'P'$uint,  1093$uint,1061$uint,0$uint,
  1092$uint,1060$uint,'A'$uint,  1099$uint,1067$uint,'S'$uint,  1074$uint,1042$uint,'D'$uint,  1072$uint,1040$uint,'F'$uint,  1087$uint,1055$uint,'G'$uint,   
  1088$uint,1056$uint,'H'$uint,  1086$uint,1054$uint,'J'$uint,  1083$uint,1051$uint,'K'$uint,  1076$uint,1044$uint,'L'$uint,  1078$uint,1046$uint,  0$uint,  1101$uint,1069$uint,0$uint,
  1103$uint,1071$uint,'Z'$uint,  1095$uint,1063$uint,'X'$uint,  1089$uint,1057$uint,'C'$uint,  1084$uint,1052$uint,'V'$uint,  1080$uint,1048$uint,'B'$uint,   
  1090$uint,1058$uint,'N'$uint,  1100$uint,1068$uint,'M'$uint,  1073$uint,1041$uint,  0$uint,  1102$uint,1070$uint,  0$uint,  1098$uint,1066$uint,  0$uint,    46$uint,  44$uint,0$uint
  
END_FUNCTION

FUNCTION TAB KeyPadAnum::KeyTab_UKRAINIAN

    49$uint,  33$uint,  0$uint,   50$uint,  34$uint,  0$uint,   51$uint,  21$uint,  0$uint,   52$uint,  59$uint,  0$uint,   53$uint,  37$uint,  0$uint,   
    54$uint,  58$uint,  0$uint,   55$uint,  63$uint,  0$uint,   56$uint,  42$uint,  0$uint,   57$uint,  40$uint,  0$uint,   48$uint,  41$uint,  0$uint,   45$uint,  95$uint,0$uint,
  1081$uint,1049$uint,'Q'$uint, 1094$uint,1062$uint,'W'$uint, 1091$uint,1059$uint,'E'$uint, 1082$uint,1050$uint,'R'$uint, 1077$uint,1045$uint,'T'$uint,   
  1085$uint,1053$uint,'Y'$uint, 1075$uint,1043$uint,'U'$uint, 1096$uint,1064$uint,'I'$uint, 1097$uint,1065$uint,'O'$uint, 1079$uint,1047$uint,'P'$uint, 1093$uint,1061$uint,0$uint,
  1092$uint,1060$uint,'A'$uint, 1110$uint,1030$uint,'S'$uint, 1074$uint,1042$uint,'D'$uint, 1072$uint,1040$uint,'F'$uint, 1087$uint,1055$uint,'G'$uint,   
  1088$uint,1056$uint,'H'$uint, 1086$uint,1054$uint,'J'$uint, 1083$uint,1051$uint,'K'$uint, 1076$uint,1044$uint,'L'$uint, 1078$uint,1046$uint,  0$uint, 1108$uint,1028$uint,0$uint,
  1103$uint,1071$uint,'Z'$uint, 1095$uint,1063$uint,'X'$uint, 1089$uint,1057$uint,'C'$uint, 1084$uint,1052$uint,'V'$uint, 1080$uint,1048$uint,'B'$uint,   
  1090$uint,1058$uint,'N'$uint, 1100$uint,1068$uint,'M'$uint, 1073$uint,1041$uint,  0$uint, 1102$uint,1070$uint,  0$uint, 1111$uint,1031$uint,  0$uint,   46$uint,  44$uint,0$uint
  
END_FUNCTION

FUNCTION TAB KeyPadAnum::KeyTab_GREEK

  '1'$uint,'!'$uint,  0$uint,  '2'$uint,'@'$uint,  0$uint, '3'$uint,'#'$uint,  0$uint, '4'$uint,'$'$uint,  0$uint, '5'$uint,'%'$uint,  0$uint,   
  '6'$uint,'^'$uint,  0$uint,  '7'$uint,'&'$uint,  0$uint, '8'$uint,'*'$uint,  0$uint, '9'$uint,'('$uint,  0$uint, '0'$uint,')'$uint,  0$uint, '-'$uint, '_'$uint,0$uint,
  ';'$uint,':'$uint,'Q'$uint,  962$uint,962$uint,'W'$uint, 949$uint,917$uint,'E'$uint, 961$uint,929$uint,'R'$uint, 964$uint,932$uint,'T'$uint,   
  965$uint,933$uint,'Y'$uint,  952$uint,920$uint,'U'$uint, 953$uint,921$uint,'I'$uint, 959$uint,927$uint,'O'$uint, 960$uint,928$uint,'P'$uint, '{'$uint,'['$uint,0$uint,
  945$uint,913$uint,'A'$uint,  963$uint,931$uint,'S'$uint, 948$uint,916$uint,'D'$uint, 966$uint,934$uint,'F'$uint, 947$uint,915$uint,'G'$uint,   
  951$uint,919$uint,'H'$uint,  958$uint,926$uint,'J'$uint, 954$uint,922$uint,'K'$uint, 955$uint,923$uint,'L'$uint,  39$uint,'"'$uint,  0$uint, '}'$uint,']'$uint,0$uint,
  950$uint,918$uint,'Z'$uint,  967$uint,935$uint,'X'$uint, 968$uint,936$uint,'C'$uint, 969$uint,937$uint,'V'$uint, 946$uint,914$uint,'B'$uint,   
  957$uint,925$uint,'N'$uint,  956$uint,924$uint,'M'$uint, '<'$uint,','$uint,  0$uint, '>'$uint,'.'$uint,  0$uint, '?'$uint,'/'$uint,  0$uint, '+'$uint,'='$uint,0$uint
  
END_FUNCTION

FUNCTION TAB KeyPadAnum::KeyTab_JAPANESE
 
 #ifdef UC_JAPANINPUT
  '1'$uint,'!'$uint,12396$uint,    0$uint, '2'$uint,'"'$uint,12405$uint,0$uint, '3'$uint,'#'$uint,12354$uint,12353$uint, '4'$uint,'$'$uint,12358$uint,12357$uint, '5'$uint,'%'$uint,12360$uint,12359$uint, '6'$uint,'&'$uint,12362$uint,12361$uint, '7'$uint, 39$uint,12420$uint,12419$uint, '8'$uint,'('$uint,12422$uint,12421$uint, '9'$uint,')'$uint,12424$uint,12423$uint, '0'$uint,'§'$uint,12431$uint,12434$uint, '-'$uint,'='$uint,12411$uint,0$uint, '^'$uint,65374$uint,12408$uint,    0$uint, 
  'q'$uint,'Q'$uint,12383$uint,    0$uint, 'w'$uint,'W'$uint,12390$uint,0$uint, 'e'$uint,'E'$uint,12356$uint,12355$uint, 'r'$uint,'R'$uint,12377$uint,    0$uint, 't'$uint,'T'$uint,12363$uint,    0$uint, 'y'$uint,'Y'$uint,12435$uint,    0$uint, 'u'$uint,'U'$uint,12394$uint,    0$uint, 'i'$uint,'I'$uint,12395$uint,    0$uint, 'o'$uint,'O'$uint,12425$uint,    0$uint, 'p'$uint,'P'$uint,12379$uint,    0$uint, '@'$uint,181$uint,JAPAN_DIACRIT_1$uint,0$uint, '['$uint,  '{'$uint,JAPAN_DIACRIT_2$uint,12300$uint,
  'a'$uint,'A'$uint,12385$uint,    0$uint, 's'$uint,'S'$uint,12392$uint,0$uint, 'd'$uint,'D'$uint,12375$uint,    0$uint, 'f'$uint,'F'$uint,12399$uint,    0$uint, 'g'$uint,'G'$uint,12365$uint,    0$uint, 'h'$uint,'H'$uint,12367$uint,    0$uint, 'j'$uint,'J'$uint,12414$uint,    0$uint, 'k'$uint,'K'$uint,12398$uint,    0$uint, 'l'$uint,'L'$uint,12426$uint,    0$uint, ';'$uint,'+'$uint,12428$uint,    0$uint, ':'$uint,'*'$uint,12369$uint,0$uint, ']'$uint,  '}'$uint,12416$uint,12301$uint,
  'z'$uint,'Z'$uint,12388$uint,12387$uint, 'x'$uint,'X'$uint,12373$uint,0$uint, 'c'$uint,'C'$uint,12381$uint,    0$uint, 'v'$uint,'V'$uint,12402$uint,    0$uint, 'b'$uint,'B'$uint,12371$uint,    0$uint, 'n'$uint,'N'$uint,12415$uint,    0$uint, 'm'$uint,'M'$uint,12418$uint,    0$uint, ','$uint,'<'$uint,12397$uint,12289$uint, '.'$uint,'>'$uint,12429$uint,12290$uint, '/'$uint,'?'$uint,12396$uint,12539$uint, '\'$uint,'_'$uint,12427$uint,0$uint, 165$uint,  ':'$uint,12540$uint,    0$uint,
 #endif
 
END_FUNCTION

FUNCTION TAB KeyPadAnum::KeyTab_JAPANESE_Text
 
#ifdef UC_JAPANINPUT
 12459$uint,12479$uint,12459$uint,12490$uint,'|'$uint,12402$uint,12425$uint,12364$uint,12394$uint,0$uint, // katagana/Hiragana
 'A'$uint,'|'$uint,12354$uint,0$uint, // A/Jap
 16#534A$uint,16#89D2$uint,'|'$uint,16#5168$uint,16#89D2$uint,0$uint, // JapanInputMode
#endif 

END_FUNCTION


FUNCTION VIRTUAL KeyPadAnum::SelectKeyboard
	VAR_OUTPUT
		retcode 	: ^USINT;
	END_VAR

  retcode := #KeyTab_QUERTY()$^usint;
  case Language_GetActualLocal() of 
    LOCAL_GERMAN    : retcode := #KeyTab_QUERTZ()$^usint;
    LOCAL_DUTCH     : retcode := #KeyTab_DUTCH()$^usint;
    LOCAL_FRENCH    : retcode := #KeyTab_FRENCH()$^usint;
    LOCAL_ITALIAN   : retcode := #KeyTab_ITALIAN()$^usint;
    LOCAL_SPANISH   : retcode := #KeyTab_SPAIN()$^usint;
    LOCAL_PORTUGESE : retcode := #KeyTab_PORTUGUESE()$^usint;
    LOCAL_NORWEGIAN : retcode := #KeyTab_NORWEGIAN()$^usint;
    LOCAL_FINNISH,
    LOCAL_SWEDISH   : retcode := #KeyTab_SWEDISH()$^usint;
    LOCAL_DANISH    : retcode := #KeyTab_DANISH()$^usint;
    LOCAL_UKRAINIAN : retcode := #KeyTab_UKRAINIAN()$^usint;
    LOCAL_RUSSIAN   : retcode := #KeyTab_RUSSIAN()$^usint;
    LOCAL_GREEK     : retcode := #KeyTab_GREEK()$^usint;
   #ifdef UC_JAPANINPUT 
    LOCAL_JAPANESE  : retcode := #KeyTab_JAPANESE()$^usint;
   #endif
  end_case;

  retcode += 4;
  
END_FUNCTION

FUNCTION KeyPadAnum::IsUnicodeKeyboard
	VAR_INPUT
		pkey 	: ^USINT;
	END_VAR
	VAR_OUTPUT
		retcode 	: BOOL;
	END_VAR
  VAR
  	pukbrd : ^udint;
  END_VAR

  retcode := false;
  pukbrd  := #KeyTab_RUSSIAN();
  pkey    -= 4;
  if(pkey$^udint^ = pukbrd^) then // Abfrage ob bytesize von tabelle so gross wie RUSSIAN ist
    retcode := true;
  end_if;

END_FUNCTION

FUNCTION KeyPadAnum::KeyPadAnum
	VAR_OUTPUT
		ret_code 	: ConfStates;
	END_VAR

	ret_code         := C_OK;
  KeyButton_XOff   := 5;
  KeyButton_YOff   := 37;
  KeyButton_Width  := 50;
  KeyButton_Height := 50;

END_FUNCTION

FUNCTION VIRTUAL GLOBAL KeyPadAnum::S_CreateNew
	VAR_INPUT
		psetup 	: ^_NEWSCREENPROP;
	END_VAR
	VAR_OUTPUT
		retcode 	: BOOL;
	END_VAR
  VAR
  	room : _ROOM;
    tmp, xx, yy : int;
    pdkp : ^_DEFKEYPAD;
   #ifdef UC_JAPANINPUT 
    loc : _LOCAL;
   #endif
  END_VAR
  
  retcode       := true;
  DoneByProgram := true;
  
  KeyButton_XOff   := 5;
  KeyButton_YOff   := 37;
  KeyButton_Width  := 50;
  KeyButton_Height := 50;  
  
  MyGetScreenSize(#room);
  
  xx := 640; // keypad width
  yy := 342; // keypad height

 #ifdef UC_JAPANINPUT
  loc := Language_GetActualLocal();
  if(loc = LOCAL_JAPANESE) then
    xx := 690; // keypad width
    if(room.xy2.x < 690) then
      xx := room.xy2.x + 1;
      KeyButton_Width := (xx * 10) / 138;
    end_if;
    
  elsif(room.xy2.x < 639) then
 #else
  if(room.xy2.x < 639) then
 #endif 
    KeyButton_XOff   := 4;
    KeyButton_Width  := 37;
    KeyButton_Height := 44; // 37
    xx               := 480;
    yy               := 304; // 265
    
    if(room.xy2.x <= 320) then
      KeyButton_Width := 23;
      xx := 313;
    end_if;
    
    if(room.xy2.y <= 240) then
      KeyButton_Height := 30;
      yy := 224;
    end_if;
    
  end_if;
  
  pdkp := Get_DEFKEYPAD();
  tmp  := KeyPadImg.GetTitleLineHeight(pdkp^.WindowFrame) - KeyPadImg.GetTitleLineHeight(FRAME_NONE);
  YOff := KeyButton_YOff + tmp;
  yy   += tmp;
  
  psetup^.Position.xy1.x     := (room.xy2.x - room.xy1.x + 1 - xx) / 2;
  psetup^.Position.xy1.y     := (room.xy2.y - room.xy1.y + 1 - yy) / 2;
  psetup^.Position.xy2.x     := psetup^.Position.xy1.x + xx - 1;
  psetup^.Position.xy2.y     := psetup^.Position.xy1.y + yy - 1;
  psetup^.FrameId            := pdkp^.WindowFrame;
  psetup^.TouchEditorAscii   := false;
  psetup^.TouchEditorNumeric := false;
  psetup^.ColorBack          := pdkp^.WindowColorBack;
  psetup^.ColorHatch         := pdkp^.TitleBarColor;  // sa32226
  
END_FUNCTION

FUNCTION VIRTUAL KeyPadAnum::GetBig
	VAR_INPUT
		pkey 	: ^USINT;
	END_VAR
	VAR_OUTPUT
		retcode 	: USINT;
	END_VAR
  VAR
  	pc1, pc2 : ^usint;
  END_VAR

  retcode := 0;  
  pc1  := #SingleText()$^usint + 4 + pkey^; pkey += 1;
  pc2  := #SingleText()$^usint + 4 + pkey^;
  if(pc1^= pc2^) then
    retcode := pc1^;
  end_if;
  
END_FUNCTION  

#pragma warning (disable : 73)
FUNCTION VIRTUAL KeyPadAnum::ModifyTitleText
	VAR_INPUT
		pany 	: ^_ANYPARA;
		varno 	: UDINT;
	END_VAR

END_FUNCTION
#pragma warning (default : 73)

#ifdef UC_JAPANINPUT  
FUNCTION AddTabKey
	VAR_INPUT
		pic 	: ^void;
		pstyle 	: ^_STYLESHEET;
		proom 	: ^_ROOM;
		pkey 	: ^UINT;
		caplett 	: dint;
	END_VAR
  VAR
    ucode : array[0..3] of uint;
    ustr : array[0..5] of uint;
  END_VAR

  ucode[0] := pkey^; pkey += 2;
  ucode[1] := pkey^; pkey += 2;
  ucode[2] := pkey^; pkey += 2;
  ucode[3] := pkey^; pkey += 2;
         
  if(((ucode[0] - ucode[1]) = 32) | (ucode[0] = ucode[1])) then
    ustr[0] := ucode[1];
    ustr[1] := 0;

    if(caplett = 1) then
      ustr[0]  := ucode[0] ;
      ucode[0] := ucode[1];
      ucode[1] := ustr[0];
    end_if;
  else
    ustr[0] := ucode[1];
    ustr[1] := '|';
    ustr[2] := ucode[0];
    ustr[3] := 0;
  end_if;

  add_key(pic$^_MY_PICTURE, pstyle, proom, DEFSCOPE, #ustr[0], sizeof(_UNI), T_CENTERBOUND or T_MIDBOUND, ucode[0], ucode[1], ucode[2], ucode[3]);

END_FUNCTION
#endif // UC_JAPANINPUT

#pragma warning (disable : 73)
FUNCTION virtual KeyPadAnum::S_Start_Japanese
	VAR_INPUT
		pic 	: ^void;
    pstyle :^_STYLESHEET;
    pdkp : ^_DEFKEYPAD;
	END_VAR
 #ifdef UC_JAPANINPUT  
  VAR
    room : _ROOM;
    x, y : _KOORD;
    pkey : ^usint;
    ino, jno : udint;
    puni : ^uint;
    sx2 : int;
  END_VAR

  pkey := SelectKeyboard();

  for y:=0 to 3 do
    room.xy1.y := YOff + y * KeyButton_Height + KeyButton_Height;
    room.xy2.y := room.xy1.y + (KeyButton_Height - 2);
    for x:=0 to 11 do
      room.xy1.x := Keybutton_XOff + y * 10 + x * KeyButton_Width;
      room.xy2.x := room.xy1.x + (KeyButton_Width - 2);
      AddTabKey(pic, pstyle, #room, pkey$^uint, CapitalLetter);
      pkey += 8;
    end_for;
  end_for;

  // key backspace
  room.xy1.x := Keybutton_XOff + 10 + KeyButton_Width * 12;
  room.xy1.y := YOff + KeyButton_Height;
  room.xy2.x := room.xy1.x + (KeyButton_Width + 20 - 2);
  room.xy2.y := room.xy1.y + (KeyButton_Height - 2);
  ino := KeyPadImg.GetImage(0);
  add_key(pic$^_MY_PICTURE, pstyle, #room, ino, NIL, sizeof(_ASCII), T_CENTERBOUND or T_MIDBOUND, _BCKSPC, _BCKSPC);
  
  // key insert
  room.xy1.x += 10;
  room.xy1.y := room.xy2.y + 2;
  room.xy2.y := room.xy1.y + (KeyButton_Height - 2);
  add_button(pic$^_MY_PICTURE, pstyle, #room, DEFSCOPE, DEFSCOPE, DEFSCOPE, VARNO_INSERTFLAG, DEFSCOPE, DEFSCOPE, "Ins", "Ins", sizeof(_ASCII), false, 0, 0, DEFSCOPE, 1, 0, T_CENTERBOUND or T_MIDBOUND);

  // key enter
  room.xy1.x := room.xy2.x - (KeyButton_Width - 2);
  room.xy1.y := room.xy2.y + 2;
  room.xy2.y := room.xy1.y + (2 * KeyButton_Height - 2);
  ino := KeyPadImg.GetImage(1);
  //add_button(pic$^_MY_PICTURE, #style, #room, DEFSCOPE, DEFSCOPE, DEFSCOPE, DEFSCOPE, ino, ino, NIL, NIL, sizeof(_ASCII), true, 0, 0, DEFSCOPE, 1, 0, T_CENTERBOUND or T_MIDBOUND);
  add_key(pic$^_MY_PICTURE, pstyle, #room, ino, NIL, sizeof(_ASCII), T_CENTERBOUND or T_MIDBOUND, _ENTER, _ENTER);

  // key right
  room.xy1.y := room.xy2.y + 2;
  room.xy2.y := room.xy1.y + KeyButton_Height - 2;
  ino := KeyPadImg.GetImage(2);
  add_key(pic$^_MY_PICTURE, pstyle, #room, ino, NIL, sizeof(_ASCII), T_CENTERBOUND or T_MIDBOUND, _RIGHT, _RIGHT);

  // key left
  room.xy1.x := room.xy1.x - KeyButton_Width;
  room.xy2.x := room.xy2.x - KeyButton_Width;
  ino := KeyPadImg.GetImage(3);
  add_key(pic$^_MY_PICTURE, pstyle, #room, ino, NIL, sizeof(_ASCII), T_CENTERBOUND or T_MIDBOUND, _LEFT, _LEFT);

  // hiragana / katakana key
  puni := #KeyTab_JAPANESE_Text() + 4;
  room.xy1.x := room.xy1.x - KeyButton_Width - 20;
  room.xy2.x := room.xy2.x - KeyButton_Width;
  add_button(pic$^_MY_PICTURE, pstyle, #room, DEFSCOPE, DEFSCOPE, DEFSCOPE, VARNO_HIRAGANA_KATAGANA, DEFSCOPE, DEFSCOPE, puni, puni, sizeof(_UNI), false, 0, 0, DEFSCOPE, 1, 0, T_CENTERBOUND or T_MIDBOUND);
  sx2 := room.xy1.x - 2;

  y := 4;
  room.xy1.y := YOff + y * KeyButton_Height + KeyButton_Height;
  room.xy2.y := room.xy1.y + (KeyButton_Height - 2);

  ino := 5;
  jno := 4;
  if(CapitalLetter = 1) then
    ino := 4;
    jno := 5;
  end_if;
  ino := KeyPadImg.GetImage(ino);
  jno := KeyPadImg.GetImage(jno);

  // key shift (left)
  room.xy1.x := Keybutton_XOff;
  room.xy2.x := room.xy1.x + (KeyButton_Width + 20 - 2);
  add_button(pic$^_MY_PICTURE, pstyle, #room, DEFSCOPE, DEFSCOPE, DEFSCOPE, VARNO_SHIFTFLAG, ino, jno, NIL, NIL, sizeof(_ASCII), false, 0, 0, DEFSCOPE, 1, 0, T_CENTERBOUND or T_MIDBOUND);

  // key altgr_lock
  puni := #KeyTab_JAPANESE_Text() + 4 + 20;    
  room.xy1.x := room.xy2.x + 2;
  room.xy2.x := room.xy1.x + (KeyButton_Width + 20 - 2);
  add_button(pic$^_MY_PICTURE, pstyle, #room, DEFSCOPE, DEFSCOPE, DEFSCOPE, VARNO_ALTGRFLAG_LOCK, DEFSCOPE, DEFSCOPE, puni, puni, sizeof(_UNI), false, 0, 0, DEFSCOPE, 1, 0, T_CENTERBOUND or T_MIDBOUND);

  // Japan Input mode (Unterstützung Dictionary)
  puni := #KeyTab_JAPANESE_Text() + 4 + 28;  
  room.xy1.x := room.xy2.x + 2;
  room.xy2.x := room.xy1.x + KeyButton_Width - 2;
  add_button(pic$^_MY_PICTURE, pstyle, #room, DEFSCOPE, DEFSCOPE, DEFSCOPE, VARNO_JAPANESE_INPUT, DEFSCOPE, DEFSCOPE, puni, puni, sizeof(_UNI), false, 0, 0, DEFSCOPE, 1, 0, T_CENTERBOUND or T_MIDBOUND);

  // key space
  room.xy1.x := room.xy2.x + 2;
  room.xy2.x := sx2; //room.xy1.x + 6 * KeyButton_Width - 2 + 20;
  add_key(pic$^_MY_PICTURE, pstyle, #room, DEFSCOPE, NIL, sizeof(_ASCII), T_CENTERBOUND or T_MIDBOUND, ' ', ' ');

  // input
  setup_STYLESHEET(pstyle, #pdkp^.StandardFontSchemeName[0], FRAME_STEALTH, T_CENTERBOUND or T_MIDBOUND or T_INVERTTHEME, LIGHTGRAY, WHITE, LIGHTGRAY, WHITE, DARKGRAY, NIL, NIL, NIL, NIL, NIL);
  room.xy1.x := Keybutton_XOff;
  room.xy1.y := YOff;
  room.xy2.x := room.xy1.x + 10 + (KeyButton_Width * 13 + 20 - 2);
  room.xy2.y := room.xy1.y + KeyButton_Height - 6;
  add_input(pic$^_MY_PICTURE, pstyle, #room, DEFSCOPE, VARNO_EDITORDUMMY, AS_ASCII, DEFSCOPE);
 #endif // UC_JAPANINPUT
 
END_FUNCTION
#pragma warning (default : 73)

FUNCTION VIRTUAL GLOBAL KeyPadAnum::S_Start
	VAR_INPUT
		pic 	: ^void;
		firsttime 	: BOOL;
	END_VAR
  VAR
    room : _ROOM;
  	style, stylegr : _STYLESHEET;
    x, y : _KOORD;
    any : _ANYPARA;
    pkey : ^usint;
    big : usint;
    code : array[0..2] of usint;
    ucode : array[0..2] of uint;
    str : array[0..5] of char;
    ustr : array[0..5] of uint;
    ino, jno : udint;
    pdkp : ^_DEFKEYPAD;
  END_VAR

  if(DoneByProgram = true) & (firsttime = true) then
    
    CapitalLetter := CapitalLetter.Read();
    AltGr         := AltGr.Read();
    pdkp          := Get_DEFKEYPAD();
    
    init_STYLESHEET(#style);
    setup_STYLESHEET(#style, #pdkp^.StandardFontSchemeName[0], pdkp^.ButtonFrame, T_CENTERBOUND or T_MIDBOUND, pdkp^.ButtonColorReleased, pdkp^.ButtonColorText, pdkp^.ButtonColorPressed, WHITE, DARKGRAY, NIL, NIL, NIL, NIL, NIL);
    
    pkey := SelectKeyboard();
    
   #ifdef UC_JAPANINPUT
    if((pkey-4)$^udint = #KeyTab_JAPANESE()) then
       S_Start_Japanese(pic, #style, pdkp);
    else
   #endif
 
      if(IsUnicodeKeyboard(pkey) = true) then
        for y:=0 to 3 do
          for x:=0 to 10 do
            room.xy1.x := Keybutton_XOff + y * 10 + x * KeyButton_Width;
            room.xy1.y := YOff + y * KeyButton_Height + KeyButton_Height;
            room.xy2.x := room.xy1.x + (KeyButton_Width - 2);
            room.xy2.y := room.xy1.y + (KeyButton_Height - 2);

            ucode[0]  := pkey$^uint^; pkey += 2;
            ucode[1]  := pkey$^uint^; pkey += 2;
            ucode[2]  := _NOKEY;
            if(AltGr = 1) then
              ucode[2] := pkey$^uint^;
            end_if;
            pkey += 2;
            
            if(((ucode[0] - ucode[1]) = 32) | (ucode[0] = ucode[1])) then
              ustr[0] := ucode[1];
              ustr[1] := 0;

              if(CapitalLetter = 1) then
                ustr[0]  := ucode[0] ;
                ucode[0] := ucode[1];
                ucode[1] := ustr[0];
              end_if;
            else
              ustr[0] := ucode[1];
              ustr[1] := '|';
              ustr[2] := ucode[0];
              ustr[3] := 0;
            end_if;

            add_key(pic$^_MY_PICTURE, #style, #room, DEFSCOPE, #ustr[0], sizeof(_UNI), T_CENTERBOUND or T_MIDBOUND, ucode[0], ucode[1], ucode[2]);
          end_for;
        end_for;
      else
        for y:=0 to 3 do
          for x:=0 to 10 do
            room.xy1.x := Keybutton_XOff + y * 10 + x * KeyButton_Width;
            room.xy1.y := YOff + y * KeyButton_Height + KeyButton_Height;
            room.xy2.x := room.xy1.x + (KeyButton_Width - 2);
            room.xy2.y := room.xy1.y + (KeyButton_Height - 2);

            code$uint := pkey$^uint^;
            code[2]   := _NOKEY;
            if(AltGr = 1) then
              code[2] := (pkey+2)^;
            end_if;
          
            big := GetBig(pkey);
            if(big <> 0) then
              str[0] := big;
              str[1] := 0;
            
              if(CapitalLetter = 1) then
                str[0]  := str[0] xor ('a' xor 'A');
                code[0] := code[1];
                code[1] := pkey^;
              end_if;
            else
              str[0] := (pkey + 1)^;
              str[1] := '|';
              str[2] := pkey^;
              str[3] := 0;
            end_if;

            add_key(pic$^_MY_PICTURE, #style, #room, DEFSCOPE, #str[0], sizeof(_ASCII), T_CENTERBOUND or T_MIDBOUND, code[0], code[1], code[2]);
            pkey += 3;
          end_for;
        end_for;
      end_if;
         
      // key backspace
      room.xy1.x := Keybutton_XOff + 10 + KeyButton_Width * 11;
      room.xy1.y := YOff + KeyButton_Height;
      room.xy2.x := room.xy1.x + (KeyButton_Width + 20 - 2);
      room.xy2.y := room.xy1.y + (KeyButton_Height - 2);
      ino := KeyPadImg.GetImage(0);
      add_key(pic$^_MY_PICTURE, #style, #room, ino, NIL, sizeof(_ASCII), T_CENTERBOUND or T_MIDBOUND, _BCKSPC, _BCKSPC);
    
      // key insert
  //    room.xy1.x := room.xy2.x - (((KeyButton_Width * 3) / 2) - 2);
      room.xy1.x += 10;
      room.xy1.y := room.xy2.y + 2;
      room.xy2.y := room.xy1.y + (KeyButton_Height - 2);
      add_button(pic$^_MY_PICTURE, #style, #room, DEFSCOPE, DEFSCOPE, DEFSCOPE, VARNO_INSERTFLAG, DEFSCOPE, DEFSCOPE, "Ins", "Ins", sizeof(_ASCII), false, 0, 0, DEFSCOPE, 1, 0, T_CENTERBOUND or T_MIDBOUND);

//      room.xy2.y := room.xy1.y + (KeyButton_Height/2 - 2);
//      add_button(pic$^_MY_PICTURE, #style, #room, DEFSCOPE, DEFSCOPE, DEFSCOPE, VARNO_JAPANESE_INPUT, DEFSCOPE, DEFSCOPE, "Japan", "Japan", sizeof(_ASCII), false, 0, 0, DEFSCOPE, 1, 0, T_CENTERBOUND or T_MIDBOUND);
//      room.xy1.y := room.xy2.y + 2;
//      room.xy2.y := room.xy1.y + (KeyButton_Height/2 - 2);
//      add_button(pic$^_MY_PICTURE, #style, #room, DEFSCOPE, DEFSCOPE, DEFSCOPE, VARNO_HIRAGANA_KATAGANA, DEFSCOPE, DEFSCOPE, "Kata", "Hira", sizeof(_ASCII), false, 0, 0, DEFSCOPE, 1, 0, T_CENTERBOUND or T_MIDBOUND);
      
      // key enter
      room.xy1.x := room.xy2.x - (KeyButton_Width - 2);
      room.xy1.y := room.xy2.y + 2;
      room.xy2.y := room.xy1.y + (2 * KeyButton_Height - 2);
      ino := KeyPadImg.GetImage(1);
      //add_button(pic$^_MY_PICTURE, #style, #room, DEFSCOPE, DEFSCOPE, DEFSCOPE, DEFSCOPE, ino, ino, NIL, NIL, sizeof(_ASCII), true, 0, 0, DEFSCOPE, 1, 0, T_CENTERBOUND or T_MIDBOUND);
      add_key(pic$^_MY_PICTURE, #style, #room, ino, NIL, sizeof(_ASCII), T_CENTERBOUND or T_MIDBOUND, _ENTER, _ENTER);

      // key right
      room.xy1.y := room.xy2.y + 2;
      room.xy2.y := room.xy1.y + KeyButton_Height - 2;
      ino := KeyPadImg.GetImage(2);
      add_key(pic$^_MY_PICTURE, #style, #room, ino, NIL, sizeof(_ASCII), T_CENTERBOUND or T_MIDBOUND, _RIGHT, _RIGHT);

      // key left
      room.xy1.x := room.xy1.x - KeyButton_Width;
      room.xy2.x := room.xy2.x - KeyButton_Width;
      ino := KeyPadImg.GetImage(3);
      add_key(pic$^_MY_PICTURE, #style, #room, ino, NIL, sizeof(_ASCII), T_CENTERBOUND or T_MIDBOUND, _LEFT, _LEFT);


      ino := 5;
      jno := 4;
      if(CapitalLetter = 1) then
        ino := 4;
        jno := 5;
      end_if;
      ino := KeyPadImg.GetImage(ino);
      jno := KeyPadImg.GetImage(jno);
      if(AltGr = 0) then
        // key shift (right)
        room.xy2.x := room.xy1.x - 2;
        room.xy1.x := room.xy2.x - (KeyButton_Width + 20 - 2);
        add_button(pic$^_MY_PICTURE, #style, #room, DEFSCOPE, DEFSCOPE, DEFSCOPE, VARNO_SHIFTFLAG, ino, jno, NIL, NIL, sizeof(_ASCII), false, 0, 0, DEFSCOPE, 1, 0, T_CENTERBOUND or T_MIDBOUND);
      else
        // key altgr (right)
        init_STYLESHEET(#stylegr);
        setup_STYLESHEET(#stylegr, #pdkp^.StandardFontSchemeName[0], pdkp^.ButtonFrame, T_CENTERBOUND or T_MIDBOUND, pdkp^.ButtonColorReleased, pdkp^.ButtonColorText, LIGHTCYAN, WHITE, DARKGRAY, NIL, NIL, NIL, NIL, NIL);
        room.xy2.x := room.xy1.x - 2;
        room.xy1.x := room.xy2.x - (KeyButton_Width + 20 - 2);
        add_button(pic$^_MY_PICTURE, #stylegr, #room, DEFSCOPE, DEFSCOPE, DEFSCOPE, VARNO_ALTGRFLAG, DEFSCOPE, DEFSCOPE, "AltGr", "AltGr", sizeof(_ASCII), false, 0, 0, DEFSCOPE, 1, 0, T_CENTERBOUND or T_MIDBOUND);
        free_STYLESHEET(#stylegr); 
      end_if;

      // key shift (left)
      room.xy1.x := Keybutton_XOff;
      room.xy2.x := room.xy1.x + (KeyButton_Width + 20 - 2);
      add_button(pic$^_MY_PICTURE, #style, #room, DEFSCOPE, DEFSCOPE, DEFSCOPE, VARNO_SHIFTFLAG, ino, jno, NIL, NIL, sizeof(_ASCII), false, 0, 0, DEFSCOPE, 1, 0, T_CENTERBOUND or T_MIDBOUND);

      // key space
      room.xy1.x := Keybutton_XOff + (KeyButton_Width + 20);
      room.xy2.x := Keybutton_XOff + 9 * KeyButton_Width - 2 + 10;
      add_key(pic$^_MY_PICTURE, #style, #room, DEFSCOPE, NIL, sizeof(_ASCII), T_CENTERBOUND or T_MIDBOUND, ' ', ' ');
     
      // input
      setup_STYLESHEET(#style, #pdkp^.StandardFontSchemeName[0], FRAME_STEALTH, T_CENTERBOUND or T_MIDBOUND or T_INVERTTHEME, LIGHTGRAY, WHITE, LIGHTGRAY, WHITE, DARKGRAY, NIL, NIL, NIL, NIL, NIL);
      room.xy1.x := Keybutton_XOff;
      room.xy1.y := YOff;
      room.xy2.x := room.xy1.x + 10 + (KeyButton_Width * 12 + 20 - 2);
      room.xy2.y := room.xy1.y + KeyButton_Height - 6;
      add_input(pic$^_MY_PICTURE, #style, #room, DEFSCOPE, VARNO_EDITORDUMMY, AS_ASCII, DEFSCOPE);

   #ifdef UC_JAPANINPUT
    end_if;
   #endif
   
    // titletext
    if(pdkp^.TitleColorText$UINT <> INVISIBLE) then
      setup_STYLESHEET(#style, #pdkp^.StandardFontSchemeName[0], FRAME_NONE, T_LEFTBOUND or T_MIDBOUND, INVISIBLE, pdkp^.TitleColorText, INVISIBLE, INVISIBLE, INVISIBLE, NIL, NIL, NIL, NIL, NIL);
      room.xy1.x := Keybutton_XOff;
      room.xy1.y := 2;
      room.xy2.x := room.xy1.x + (KeyButton_Width * 12); //400;
      room.xy2.y := 2 + KeyPadImg.GetTitleLineHeight(pdkp^.WindowFrame);
      init_ANYPARA(#any);
      any.anything.list := VARTXT1;
      any.anything.no   := VARNO_EDITORDUMMY;
      
      ModifyTitleText(#any, VarList_GetServerToEdit()); // sa32402
      
      add_text(pic$^_MY_PICTURE, #style, #room, DEFSCOPE, #any, NIL, sizeof(_ASCII), DEFSCOPE);
      free_ANYPARA(#any);
    end_if;
    
    if(has_theme_cancel(pdkp^.WindowFrame) = false) then
      // cancel button
      setup_STYLESHEET(#style, #pdkp^.StandardFontSchemeName[0], pdkp^.ButtonFrame, T_CENTERBOUND or T_MIDBOUND, 16#F800, pdkp^.ButtonColorText, RED, WHITE, DARKGRAY, NIL, NIL, NIL, NIL, NIL);
      room.xy1.x := Keybutton_XOff + (KeyButton_Width * 12) + 2;
      room.xy1.y := 5;
      room.xy2.x := room.xy1.x + 26;
      room.xy2.y := 31;
      ino := KeyPadImg.GetImage(6);
      add_key(pic$^_MY_PICTURE, #style, #room, ino, NIL, sizeof(_ASCII), T_CENTERBOUND or T_MIDBOUND, _ESC, _ESC);
    end_if;

   
    free_STYLESHEET(#style);
  end_if;

END_FUNCTION
